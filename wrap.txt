{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import json\n",
    "from bs4 import BeautifulSoup\n",
    "import time\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "HEADERS = ({\n",
    "    'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',\n",
    "    'Accept-Language': 'en-US, en;q=0.5'\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_body(url):\n",
    "    page = requests.get(url,headers=HEADERS)\n",
    "    return BeautifulSoup(page.content, 'html.parser')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Write a python program to display all the header tags from ‘en.wikipedia.org/wiki/Main_Page’."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### There is no \"Header Tags\" on the this web page I'm considering \"Header Tags\" Means all the \"Heading Tag\" (H1 to H6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://en.wikipedia.org/wiki/Main_Page'\n",
    "body = get_body(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "h_list = []\n",
    "for i in range(1,7):\n",
    "    h_list.append([one.text for one in body.findAll(f'h{i}') ])\n",
    "all_headers = pd.DataFrame(h_list).T\n",
    "all_headers.columns = [ f'h{i}' for i in range(1,7)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>h1</th>\n",
       "      <th>h2</th>\n",
       "      <th>h3</th>\n",
       "      <th>h4</th>\n",
       "      <th>h5</th>\n",
       "      <th>h6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Main Page</td>\n",
       "      <td>From today's featured article</td>\n",
       "      <td>Personal tools\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>None</td>\n",
       "      <td>Did you know ...</td>\n",
       "      <td>Namespaces\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>None</td>\n",
       "      <td>In the news</td>\n",
       "      <td>Variants\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>None</td>\n",
       "      <td>On this day</td>\n",
       "      <td>Views\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>None</td>\n",
       "      <td>Today's featured picture</td>\n",
       "      <td>More\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>None</td>\n",
       "      <td>Other areas of Wikipedia</td>\n",
       "      <td>\\nSearch\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>None</td>\n",
       "      <td>Wikipedia's sister projects</td>\n",
       "      <td>Navigation\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>None</td>\n",
       "      <td>Wikipedia languages</td>\n",
       "      <td>Contribute\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>None</td>\n",
       "      <td>Navigation menu</td>\n",
       "      <td>Tools\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Print/export\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>In other projects\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Languages\\n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           h1                             h2                   h3    h4    h5  \\\n",
       "0   Main Page  From today's featured article     Personal tools\\n  None  None   \n",
       "1        None               Did you know ...         Namespaces\\n  None  None   \n",
       "2        None                    In the news           Variants\\n  None  None   \n",
       "3        None                    On this day              Views\\n  None  None   \n",
       "4        None       Today's featured picture               More\\n  None  None   \n",
       "5        None       Other areas of Wikipedia           \\nSearch\\n  None  None   \n",
       "6        None    Wikipedia's sister projects         Navigation\\n  None  None   \n",
       "7        None            Wikipedia languages         Contribute\\n  None  None   \n",
       "8        None                Navigation menu              Tools\\n  None  None   \n",
       "9        None                           None       Print/export\\n  None  None   \n",
       "10       None                           None  In other projects\\n  None  None   \n",
       "11       None                           None          Languages\\n  None  None   \n",
       "\n",
       "      h6  \n",
       "0   None  \n",
       "1   None  \n",
       "2   None  \n",
       "3   None  \n",
       "4   None  \n",
       "5   None  \n",
       "6   None  \n",
       "7   None  \n",
       "8   None  \n",
       "9   None  \n",
       "10  None  \n",
       "11  None  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_headers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Write a python program to display IMDB’s Top rated 100 movies’ data (i.e. Name, IMDB rating, Year of release)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.imdb.com/chart/top?ref_=nv_mv_250'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_divs = get_body(url).find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1994</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1972</td>\n",
       "      <td>The Godfather</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1974</td>\n",
       "      <td>The Godfather: Part II</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008</td>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1957</td>\n",
       "      <td>12 Angry Men</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>2012</td>\n",
       "      <td>The Hunt</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>2000</td>\n",
       "      <td>Requiem for a Dream</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>1952</td>\n",
       "      <td>Singin' in the Rain</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>1959</td>\n",
       "      <td>North by Northwest</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>2004</td>\n",
       "      <td>Eternal Sunshine of the Spotless Mind</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    year                                   name rating\n",
       "0   1994               The Shawshank Redemption    9.2\n",
       "1   1972                          The Godfather    9.1\n",
       "2   1974                 The Godfather: Part II    9.0\n",
       "3   2008                        The Dark Knight    9.0\n",
       "4   1957                           12 Angry Men    8.9\n",
       "..   ...                                    ...    ...\n",
       "95  2012                               The Hunt    8.3\n",
       "96  2000                    Requiem for a Dream    8.3\n",
       "97  1952                    Singin' in the Rain    8.3\n",
       "98  1959                     North by Northwest    8.3\n",
       "99  2004  Eternal Sunshine of the Spotless Mind    8.3\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_list = []\n",
    "for i,one_div in enumerate(all_divs):\n",
    "    if i == 0 :\n",
    "        continue\n",
    "    if i == 101:\n",
    "        break\n",
    "        \n",
    "    title_column = one_div.find('td',{'class','titleColumn'})\n",
    "    year = title_column.find('span').text.replace('(','').replace(')','')\n",
    "    name = title_column.find('a').text\n",
    "    rating = one_div.find('td',{'class','ratingColumn'}).find('strong').text\n",
    "    final_list.append({'year':year,'name':name,'rating':rating})\n",
    "    \n",
    "final_df = pd.DataFrame(final_list)\n",
    "final_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Write a python program to display IMDB’s Top rated 100 Indian movies’ data (i.e. Name, IMDB rating, Year of release)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.imdb.com/india/top-rated-indian-movies/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1987</td>\n",
       "      <td>Nayakan</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>Anbe Sivam</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>Pariyerum Perumal</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1979</td>\n",
       "      <td>Hanky Panky</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>C/o Kancharapalem</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>2004</td>\n",
       "      <td>Virumandi</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>2001</td>\n",
       "      <td>Lagaan: Once Upon a Time in India</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>2012</td>\n",
       "      <td>Kahaani</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>1994</td>\n",
       "      <td>Andaz Apna Apna</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>2018</td>\n",
       "      <td>Uri: The Surgical Strike</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    year                               name rating\n",
       "0   1987                            Nayakan    8.5\n",
       "1   2003                         Anbe Sivam    8.5\n",
       "2   2018                  Pariyerum Perumal    8.5\n",
       "3   1979                        Hanky Panky    8.5\n",
       "4   2018                  C/o Kancharapalem    8.5\n",
       "..   ...                                ...    ...\n",
       "95  2004                          Virumandi    8.1\n",
       "96  2001  Lagaan: Once Upon a Time in India    8.1\n",
       "97  2012                            Kahaani    8.1\n",
       "98  1994                    Andaz Apna Apna    8.1\n",
       "99  2018           Uri: The Surgical Strike    8.1\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_divs = get_body(url).find_all('tr')\n",
    "final_list = []\n",
    "for i,one_div in enumerate(all_divs):\n",
    "    if i == 0 :\n",
    "        continue\n",
    "    if i == 101:\n",
    "        break\n",
    "        \n",
    "    title_column = one_div.find('td',{'class','titleColumn'})\n",
    "    year = title_column.find('span').text.replace('(','').replace(')','')\n",
    "    name = title_column.find('a').text\n",
    "    rating = one_div.find('td',{'class','ratingColumn'}).find('strong').text\n",
    "    final_list.append({'year':year,'name':name,'rating':rating})\n",
    "    \n",
    "final_df = pd.DataFrame(final_list)\n",
    "final_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Write a python program to scrap book name, author name, genre and book review of any 5 books from ‘www.bookpage.com’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://bookpage.com/reviews'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find_all('div',{'class','article-row'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>book_name</th>\n",
       "      <th>author_name</th>\n",
       "      <th>genre</th>\n",
       "      <th>book_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>? You Are Your Best Thing</td>\n",
       "      <td>\\nTarana Burke, Brené Brown, Cast\\n</td>\n",
       "      <td>Audio / Nonfiction / Essays</td>\n",
       "      <td>\\nTarana Burke and Brené Brown demonstrate the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond the Mapped Stars</td>\n",
       "      <td>\\nRosalyn Eves\\n</td>\n",
       "      <td>YA / YA Fiction</td>\n",
       "      <td>\\nRosalyn Eves’ Beyond the Mapped Stars blends...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>? Gordo</td>\n",
       "      <td>\\nJaime Cortez\\n</td>\n",
       "      <td>Fiction / Short Stories</td>\n",
       "      <td>\\nAs in John Steinbeck’s The Grapes of Wrath, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>? Two-Way Mirror</td>\n",
       "      <td>\\nFiona Sampson\\n</td>\n",
       "      <td>Nonfiction / Biography / Literary History</td>\n",
       "      <td>\\nPeople often think of Elizabeth Barrett Brow...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Velvet Was the Night</td>\n",
       "      <td>\\nSilvia Moreno-Garcia\\n</td>\n",
       "      <td>Fiction / Noir</td>\n",
       "      <td>\\nFor her next trick, Silvia Moreno-Garcia mov...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    book_name                          author_name  \\\n",
       "0   ? You Are Your Best Thing  \\nTarana Burke, Brené Brown, Cast\\n   \n",
       "1     Beyond the Mapped Stars                     \\nRosalyn Eves\\n   \n",
       "2                     ? Gordo                     \\nJaime Cortez\\n   \n",
       "3            ? Two-Way Mirror                    \\nFiona Sampson\\n   \n",
       "4        Velvet Was the Night             \\nSilvia Moreno-Garcia\\n   \n",
       "\n",
       "                                       genre  \\\n",
       "0                Audio / Nonfiction / Essays   \n",
       "1                            YA / YA Fiction   \n",
       "2                    Fiction / Short Stories   \n",
       "3  Nonfiction / Biography / Literary History   \n",
       "4                             Fiction / Noir   \n",
       "\n",
       "                                         book_review  \n",
       "0  \\nTarana Burke and Brené Brown demonstrate the...  \n",
       "1  \\nRosalyn Eves’ Beyond the Mapped Stars blends...  \n",
       "2  \\nAs in John Steinbeck’s The Grapes of Wrath, ...  \n",
       "3  \\nPeople often think of Elizabeth Barrett Brow...  \n",
       "4  \\nFor her next trick, Silvia Moreno-Garcia mov...  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_books = []\n",
    "for i,one_box in enumerate(all_boxs):\n",
    "    if i == 5:\n",
    "        break\n",
    "        \n",
    "    book_name = one_box.find('h4').find('a').text\n",
    "    author_name = one_box.find('p',{'class','sans'}).text\n",
    "    genre = one_box.find('p',{'class','hidden-phone'}).text.replace('\\n','')\n",
    "    book_review = one_box.find('p',{'class','excerpt'}).text\n",
    "    all_books.append({\n",
    "        'book_name': book_name,'author_name': author_name,'genre': genre,'book_review': book_review\n",
    "    })\n",
    "    \n",
    "book_df = pd.DataFrame(all_books)\n",
    "book_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Write a python program to scrape cricket rankings from ‘www.icc-cricket.com’. You have to scrape:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## i) Top 10 ODI teams in men’s cricket along with the records for matches, points and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/mens/team-rankings/odi'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find('tbody').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>match</th>\n",
       "      <th>point</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>17</td>\n",
       "      <td>2,054</td>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>England</td>\n",
       "      <td>32</td>\n",
       "      <td>3,793</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Australia</td>\n",
       "      <td>28</td>\n",
       "      <td>3,244</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>India</td>\n",
       "      <td>32</td>\n",
       "      <td>3,624</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>22</td>\n",
       "      <td>2,267</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>27</td>\n",
       "      <td>2,524</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>29</td>\n",
       "      <td>2,639</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>West Indies</td>\n",
       "      <td>30</td>\n",
       "      <td>2,523</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>29</td>\n",
       "      <td>2,303</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>17</td>\n",
       "      <td>1,054</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           team match  point rating\n",
       "0   New Zealand    17  2,054    121\n",
       "1       England    32  3,793    119\n",
       "2     Australia    28  3,244    116\n",
       "3         India    32  3,624    113\n",
       "4  South Africa    22  2,267    103\n",
       "5      Pakistan    27  2,524     93\n",
       "6    Bangladesh    29  2,639     91\n",
       "7   West Indies    30  2,523     84\n",
       "8     Sri Lanka    29  2,303     79\n",
       "9   Afghanistan    17  1,054     62"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 10 :\n",
    "        break \n",
    "        \n",
    "    team = one_box.find('span',{'class','u-hide-phablet'}).text\n",
    "    tds = one_box.find_all('td')\n",
    "    match = tds[2].text\n",
    "    point = tds[3].text\n",
    "    rating = tds[4].text.strip()\n",
    "    all_data.append({'team': team, 'match': match, 'point': point, 'rating': rating})\n",
    "team_df = pd.DataFrame(all_data)\n",
    "team_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ii) Top 10 ODI Batsmen in men along with the records of their team and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/mens/player-rankings/odi/batting'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>point</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Babar Azam</td>\n",
       "      <td>873</td>\n",
       "      <td>PAK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>844</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rohit Sharma</td>\n",
       "      <td>813</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ross Taylor</td>\n",
       "      <td>801</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Aaron Finch</td>\n",
       "      <td>779</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jonny Bairstow</td>\n",
       "      <td>775</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David Warner</td>\n",
       "      <td>762</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>758</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Shai Hope</td>\n",
       "      <td>758</td>\n",
       "      <td>WI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Kane Williamson</td>\n",
       "      <td>754</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            player point country\n",
       "0       Babar Azam   873     PAK\n",
       "1      Virat Kohli   844     IND\n",
       "2     Rohit Sharma   813     IND\n",
       "3      Ross Taylor   801      NZ\n",
       "4      Aaron Finch   779     AUS\n",
       "5   Jonny Bairstow   775     ENG\n",
       "6     David Warner   762     AUS\n",
       "7  Quinton de Kock   758      SA\n",
       "8        Shai Hope   758      WI\n",
       "9  Kane Williamson   754      NZ"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # skiping heading\n",
    "    if i == 0:\n",
    "        continue\n",
    "    \n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 11:\n",
    "        break \n",
    "    \n",
    "    tds = one_box.find_all('td')\n",
    "    \n",
    "    player = tds[1].text.replace('\\n','')\n",
    "    country = tds[2].text.replace('\\n','')\n",
    "    point = tds[3].text.replace('\\n','')\n",
    "    all_data.append({ 'player': player, 'point': point, 'country': country})\n",
    "    \n",
    "player_df = pd.DataFrame(all_data)\n",
    "player_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## iii) Top 10 ODI bowlers along with the records of their team and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/mens/player-rankings/odi/bowling'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>point</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Trent Boult</td>\n",
       "      <td>737</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Josh Hazlewood</td>\n",
       "      <td>709</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mujeeb Ur Rahman</td>\n",
       "      <td>708</td>\n",
       "      <td>AFG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chris Woakes</td>\n",
       "      <td>700</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mehedi Hasan</td>\n",
       "      <td>692</td>\n",
       "      <td>BAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Matt Henry</td>\n",
       "      <td>691</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Jasprit Bumrah</td>\n",
       "      <td>679</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Mitchell Starc</td>\n",
       "      <td>652</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Shakib Al Hasan</td>\n",
       "      <td>650</td>\n",
       "      <td>BAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Kagiso Rabada</td>\n",
       "      <td>648</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             player point country\n",
       "0       Trent Boult   737      NZ\n",
       "1    Josh Hazlewood   709     AUS\n",
       "2  Mujeeb Ur Rahman   708     AFG\n",
       "3      Chris Woakes   700     ENG\n",
       "4      Mehedi Hasan   692     BAN\n",
       "5        Matt Henry   691      NZ\n",
       "6    Jasprit Bumrah   679     IND\n",
       "7    Mitchell Starc   652     AUS\n",
       "8   Shakib Al Hasan   650     BAN\n",
       "9     Kagiso Rabada   648      SA"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # skiping heading\n",
    "    if i == 0:\n",
    "        continue\n",
    "    \n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 11:\n",
    "        break \n",
    "    \n",
    "    tds = one_box.find_all('td')\n",
    "    \n",
    "    player = tds[1].text.replace('\\n','')\n",
    "    country = tds[2].text.replace('\\n','')\n",
    "    point = tds[3].text.replace('\\n','')\n",
    "    all_data.append({ 'player': player, 'point': point, 'country': country})\n",
    "    \n",
    "player_df = pd.DataFrame(all_data)\n",
    "player_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. Write a python program to scrape cricket rankings from ‘www.icc-cricket.com’. You have to scrape:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## i) Top 10 ODI teams in women’s cricket along with the records for matches, points and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/womens/team-rankings/odi'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find('tbody').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>match</th>\n",
       "      <th>point</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Australia</td>\n",
       "      <td>18</td>\n",
       "      <td>2,955</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>England</td>\n",
       "      <td>20</td>\n",
       "      <td>2,370</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>24</td>\n",
       "      <td>2,828</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>India</td>\n",
       "      <td>23</td>\n",
       "      <td>2,535</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>21</td>\n",
       "      <td>1,947</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>West Indies</td>\n",
       "      <td>17</td>\n",
       "      <td>1,427</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>20</td>\n",
       "      <td>1,496</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>5</td>\n",
       "      <td>306</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>11</td>\n",
       "      <td>519</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Ireland</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           team match  point rating\n",
       "0     Australia    18  2,955    164\n",
       "1       England    20  2,370    119\n",
       "2  South Africa    24  2,828    118\n",
       "3         India    23  2,535    110\n",
       "4   New Zealand    21  1,947     93\n",
       "5   West Indies    17  1,427     84\n",
       "6      Pakistan    20  1,496     75\n",
       "7    Bangladesh     5    306     61\n",
       "8     Sri Lanka    11    519     47\n",
       "9       Ireland     2     25     13"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 10 :\n",
    "        break \n",
    "        \n",
    "    team = one_box.find('span',{'class','u-hide-phablet'}).text\n",
    "    tds = one_box.find_all('td')\n",
    "    match = tds[2].text\n",
    "    point = tds[3].text\n",
    "    rating = tds[4].text.strip()\n",
    "    all_data.append({'team': team, 'match': match, 'point': point, 'rating': rating})\n",
    "team_df = pd.DataFrame(all_data)\n",
    "team_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ii) Top 10 women’s ODI players along with the records of their team and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/womens/player-rankings/odi/batting'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>point</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mithali Raj</td>\n",
       "      <td>762</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lizelle Lee</td>\n",
       "      <td>758</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alyssa Healy</td>\n",
       "      <td>756</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tammy Beaumont</td>\n",
       "      <td>754</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stafanie Taylor</td>\n",
       "      <td>736</td>\n",
       "      <td>WI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Meg Lanning</td>\n",
       "      <td>723</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Amy Satterthwaite</td>\n",
       "      <td>715</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Natalie Sciver</td>\n",
       "      <td>706</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Smriti Mandhana</td>\n",
       "      <td>701</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Laura Wolvaardt</td>\n",
       "      <td>683</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              player point country\n",
       "0        Mithali Raj   762     IND\n",
       "1        Lizelle Lee   758      SA\n",
       "2       Alyssa Healy   756     AUS\n",
       "3     Tammy Beaumont   754     ENG\n",
       "4    Stafanie Taylor   736      WI\n",
       "5        Meg Lanning   723     AUS\n",
       "6  Amy Satterthwaite   715      NZ\n",
       "7     Natalie Sciver   706     ENG\n",
       "8    Smriti Mandhana   701     IND\n",
       "9    Laura Wolvaardt   683      SA"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # skiping heading\n",
    "    if i == 0:\n",
    "        continue\n",
    "    \n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 11:\n",
    "        break \n",
    "    \n",
    "    tds = one_box.find_all('td')\n",
    "    \n",
    "    player = tds[1].text.replace('\\n','')\n",
    "    country = tds[2].text.replace('\\n','')\n",
    "    point = tds[3].text.replace('\\n','')\n",
    "    all_data.append({ 'player': player, 'point': point, 'country': country})\n",
    "    \n",
    "player_df = pd.DataFrame(all_data)\n",
    "player_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## iii) Top 10 women’s ODI all-rounder along with the records of their team and rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.icc-cricket.com/rankings/womens/player-rankings/odi/all-rounder'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_boxs = get_body(url).find('table').find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>point</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Marizanne Kapp</td>\n",
       "      <td>418</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ellyse Perry</td>\n",
       "      <td>418</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Stafanie Taylor</td>\n",
       "      <td>394</td>\n",
       "      <td>WI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Natalie Sciver</td>\n",
       "      <td>365</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Deepti Sharma</td>\n",
       "      <td>331</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jess Jonassen</td>\n",
       "      <td>307</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ashleigh Gardner</td>\n",
       "      <td>252</td>\n",
       "      <td>AUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Dane van Niekerk</td>\n",
       "      <td>243</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sophie Devine</td>\n",
       "      <td>242</td>\n",
       "      <td>NZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Katherine Brunt</td>\n",
       "      <td>239</td>\n",
       "      <td>ENG</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             player point country\n",
       "0    Marizanne Kapp   418      SA\n",
       "1      Ellyse Perry   418     AUS\n",
       "2   Stafanie Taylor   394      WI\n",
       "3    Natalie Sciver   365     ENG\n",
       "4     Deepti Sharma   331     IND\n",
       "5     Jess Jonassen   307     AUS\n",
       "6  Ashleigh Gardner   252     AUS\n",
       "7  Dane van Niekerk   243      SA\n",
       "8     Sophie Devine   242      NZ\n",
       "9   Katherine Brunt   239     ENG"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looping data to get info\n",
    "all_data = []\n",
    "for i, one_box in enumerate(all_boxs):\n",
    "    \n",
    "    # skiping heading\n",
    "    if i == 0:\n",
    "        continue\n",
    "    \n",
    "    \n",
    "    # top 10 teams\n",
    "    if i == 11:\n",
    "        break \n",
    "    \n",
    "    tds = one_box.find_all('td')\n",
    "    \n",
    "    player = tds[1].text.replace('\\n','')\n",
    "    country = tds[2].text.replace('\\n','')\n",
    "    point = tds[3].text.replace('\\n','')\n",
    "    all_data.append({ 'player': player, 'point': point, 'country': country})\n",
    "    \n",
    "player_df = pd.DataFrame(all_data)\n",
    "player_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7. Write a python program to scrape details of all the mobile phones under Rs. 20,000 listed on Amazon.in. The scraped data should include Product Name, Price, Image URL and Average Rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>price</th>\n",
       "      <th>image</th>\n",
       "      <th>average_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Samsung Galaxy M11 (Black, 4GB RAM, 64GB Stora...</td>\n",
       "      <td>?9,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/710jkZNub3...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Redmi 9 (Sky Blue, 4GB RAM, 64GB Storage) | 2....</td>\n",
       "      <td>?8,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71A9Vo1Bat...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Redmi 9A (Nature Green, 2GB RAM, 32GB Storage)...</td>\n",
       "      <td>?6,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71sxlhYhKW...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Redmi 9 (Carbon Black, 4GB RAM, 64GB Storage) ...</td>\n",
       "      <td>?8,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/716nHhG9SW...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Samsung Galaxy M51 (Celestial Black, 6GB RAM, ...</td>\n",
       "      <td>?19,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/713AhSUtbH...</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Oppo A31 (Mystery Black, 6GB RAM, 128GB Storag...</td>\n",
       "      <td>?12,490</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71KCwNV6Mu...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>OPPO A31 (Mystery Black, 4GB RAM, 64GB Storage...</td>\n",
       "      <td>?10,990</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71KCwNV6Mu...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Oppo A31 (Fantasy White, 6GB RAM, 128GB Storag...</td>\n",
       "      <td>?12,490</td>\n",
       "      <td>https://m.media-amazon.com/images/I/61CnyJ-IbM...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Yagviz 2 in 1 Cigarette Lighter Car Magnetic P...</td>\n",
       "      <td>?997</td>\n",
       "      <td>https://m.media-amazon.com/images/I/51kNKJSET5...</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>OnePlus Nord CE 5G (Charcoal Ink, 8GB RAM, 128...</td>\n",
       "      <td>?24,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71LRBr1aLN...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Redmi Note 9 (Pebble Grey, 4GB RAM 64GB Storag...</td>\n",
       "      <td>?11,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71X5I1cVfb...</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>OPPO A31 (Fantasy White, 4GB RAM, 64GB Storage...</td>\n",
       "      <td>?10,990</td>\n",
       "      <td>https://m.media-amazon.com/images/I/61CnyJ-IbM...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Samsung Galaxy M31s (Mirage Blue, 8GB RAM, 128...</td>\n",
       "      <td>?16,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/61d-phh4Gf...</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Vivo Y12s (Phantom Black, 3GB, 32GB ) with No ...</td>\n",
       "      <td>?10,990</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71UAi2jwsN...</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Redmi Note 10S (Frost White, 6GB RAM, 64GB Sto...</td>\n",
       "      <td>?14,999</td>\n",
       "      <td>https://m.media-amazon.com/images/I/81SJHWh-df...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Panasonic Eluga i7 (2GB RAM, 16GB Storage, Fin...</td>\n",
       "      <td>?5,798</td>\n",
       "      <td>https://m.media-amazon.com/images/I/41QsvcpKaZ...</td>\n",
       "      <td>3.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Redmi Note 10 (Aqua Green, 4GB RAM, 64GB Stora...</td>\n",
       "      <td>?13,499</td>\n",
       "      <td>https://m.media-amazon.com/images/I/810GQ7CWdD...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FLiX (Beetel) X1 Over-Ear Wireless BT 5.0 Head...</td>\n",
       "      <td>?990</td>\n",
       "      <td>https://m.media-amazon.com/images/I/71putn0r90...</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Huawei Y9 Prime 2019 (Sapphire Blue, 4GB RAM, ...</td>\n",
       "      <td>?19,949</td>\n",
       "      <td>https://m.media-amazon.com/images/I/512DSx8CI6...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Beetel Fixed landline Phone Wireless with LED ...</td>\n",
       "      <td>?2,160</td>\n",
       "      <td>https://m.media-amazon.com/images/I/51M+-65bbM...</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Myra? TouYinGer X7 Led Projector 1800 Lumens, ...</td>\n",
       "      <td>?8,790</td>\n",
       "      <td>https://m.media-amazon.com/images/I/517GzoDiDw...</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         product_name    price  \\\n",
       "0   Samsung Galaxy M11 (Black, 4GB RAM, 64GB Stora...   ?9,999   \n",
       "1   Redmi 9 (Sky Blue, 4GB RAM, 64GB Storage) | 2....   ?8,999   \n",
       "2   Redmi 9A (Nature Green, 2GB RAM, 32GB Storage)...   ?6,999   \n",
       "3   Redmi 9 (Carbon Black, 4GB RAM, 64GB Storage) ...   ?8,999   \n",
       "4   Samsung Galaxy M51 (Celestial Black, 6GB RAM, ...  ?19,999   \n",
       "5   Oppo A31 (Mystery Black, 6GB RAM, 128GB Storag...  ?12,490   \n",
       "6   OPPO A31 (Mystery Black, 4GB RAM, 64GB Storage...  ?10,990   \n",
       "7   Oppo A31 (Fantasy White, 6GB RAM, 128GB Storag...  ?12,490   \n",
       "8   Yagviz 2 in 1 Cigarette Lighter Car Magnetic P...     ?997   \n",
       "9   OnePlus Nord CE 5G (Charcoal Ink, 8GB RAM, 128...  ?24,999   \n",
       "10  Redmi Note 9 (Pebble Grey, 4GB RAM 64GB Storag...  ?11,999   \n",
       "11  OPPO A31 (Fantasy White, 4GB RAM, 64GB Storage...  ?10,990   \n",
       "12  Samsung Galaxy M31s (Mirage Blue, 8GB RAM, 128...  ?16,999   \n",
       "13  Vivo Y12s (Phantom Black, 3GB, 32GB ) with No ...  ?10,990   \n",
       "14  Redmi Note 10S (Frost White, 6GB RAM, 64GB Sto...  ?14,999   \n",
       "15  Panasonic Eluga i7 (2GB RAM, 16GB Storage, Fin...   ?5,798   \n",
       "16  Redmi Note 10 (Aqua Green, 4GB RAM, 64GB Stora...  ?13,499   \n",
       "17  FLiX (Beetel) X1 Over-Ear Wireless BT 5.0 Head...     ?990   \n",
       "18  Huawei Y9 Prime 2019 (Sapphire Blue, 4GB RAM, ...  ?19,949   \n",
       "19  Beetel Fixed landline Phone Wireless with LED ...   ?2,160   \n",
       "20  Myra? TouYinGer X7 Led Projector 1800 Lumens, ...   ?8,790   \n",
       "\n",
       "                                                image average_rating  \n",
       "0   https://m.media-amazon.com/images/I/710jkZNub3...            4.1  \n",
       "1   https://m.media-amazon.com/images/I/71A9Vo1Bat...            4.2  \n",
       "2   https://m.media-amazon.com/images/I/71sxlhYhKW...            4.2  \n",
       "3   https://m.media-amazon.com/images/I/716nHhG9SW...            4.2  \n",
       "4   https://m.media-amazon.com/images/I/713AhSUtbH...            4.4  \n",
       "5   https://m.media-amazon.com/images/I/71KCwNV6Mu...            4.2  \n",
       "6   https://m.media-amazon.com/images/I/71KCwNV6Mu...            4.2  \n",
       "7   https://m.media-amazon.com/images/I/61CnyJ-IbM...            4.2  \n",
       "8   https://m.media-amazon.com/images/I/51kNKJSET5...            5.0  \n",
       "9   https://m.media-amazon.com/images/I/71LRBr1aLN...            4.1  \n",
       "10  https://m.media-amazon.com/images/I/71X5I1cVfb...            4.3  \n",
       "11  https://m.media-amazon.com/images/I/61CnyJ-IbM...            4.2  \n",
       "12  https://m.media-amazon.com/images/I/61d-phh4Gf...            4.3  \n",
       "13  https://m.media-amazon.com/images/I/71UAi2jwsN...            4.2  \n",
       "14  https://m.media-amazon.com/images/I/81SJHWh-df...            4.1  \n",
       "15  https://m.media-amazon.com/images/I/41QsvcpKaZ...            3.1  \n",
       "16  https://m.media-amazon.com/images/I/810GQ7CWdD...            4.1  \n",
       "17  https://m.media-amazon.com/images/I/71putn0r90...            4.0  \n",
       "18  https://m.media-amazon.com/images/I/512DSx8CI6...            4.1  \n",
       "19  https://m.media-amazon.com/images/I/51M+-65bbM...            4.1  \n",
       "20  https://m.media-amazon.com/images/I/517GzoDiDw...            3.9  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.amazon.in/s?k=all+the+mobile+phones+under+Rs.+20%2C000&ref=nb_sb_noss'\n",
    "\n",
    "is_next = True\n",
    "final_product_list = []\n",
    "i = 1\n",
    "\n",
    "while is_next:\n",
    "    \n",
    "\n",
    "    all_mobile_data = get_body(url)\n",
    "\n",
    "    all_boxs = all_mobile_data.find_all('div',{'class':['s-result-item','s-asin']})\n",
    "\n",
    "    \n",
    "    # Find all the data of the currecnt page\n",
    "    for one_box in all_boxs:\n",
    "        try:\n",
    "            inner_box = one_box.find('div',{'class':['a-section','a-spacing-medium']})\n",
    "\n",
    "            product_name = inner_box.find('h2').find('span').text\n",
    "\n",
    "            price = inner_box.find_all('div',{'class','sg-col-inner'})[1] \\\n",
    "                            .find('div',{'class','sg-row'}) \\\n",
    "                            .find('div',{'class','a-spacing-top-small'}) \\\n",
    "                            .find_all('span')[1].text\n",
    "\n",
    "            if '?' not in price:\n",
    "                price = inner_box.find_all('div',{'class','sg-col-inner'})[1] \\\n",
    "                            .find('div',{'class','sg-row'}) \\\n",
    "                            .find('div',{'class','a-spacing-top-small'}) \\\n",
    "                            .find('span',{'class','a-offscreen'}).text\n",
    "\n",
    "            image = inner_box.find('img')['src']\n",
    "            average_rating = inner_box.find('i').find('span').text.split(' out of 5 stars')[0]\n",
    "\n",
    "            final_product_list.append({\n",
    "                'product_name': product_name, \n",
    "                'price': price, \n",
    "                'image': image, \n",
    "                'average_rating': average_rating\n",
    "            })\n",
    "        except Exception as e:\n",
    "            continue\n",
    "            \n",
    "           \n",
    "    # move to the next page\n",
    "    \n",
    "    i += 1\n",
    "    try:\n",
    "        a_pagination = all_mobile_data.find('ul',{'class','a-pagination'})\n",
    "        s_pagination_item = all_mobile_data.find('a',{'class':['s-pagination-item','s-pagination-button']})\n",
    "        try:\n",
    "            if a_pagination != None:\n",
    "                sub_url = all_mobile_data.find('ul',{'class','a-pagination'}).find(\"a\", string=str(i))['href']\n",
    "            elif s_pagination_item != None:\n",
    "                find_element = all_mobile_data.find('a',{'class':['s-pagination-item','s-pagination-button']}).text\n",
    "                if 'Previous' in find_element:\n",
    "                    find_element = all_mobile_data.find_all('a',{'class':['s-pagination-item','s-pagination-button']})\n",
    "                sub_url = all_mobile_data.find('a',{'class':['s-pagination-item','s-pagination-button']}).find_all(\"a\", string=str(i))['href']\n",
    "\n",
    "        except Exception as e1:\n",
    "            sub_urls = all_mobile_data.find('a',{'class':['s-pagination-item','s-pagination-button']}).find_all(\"a\", string=str(i))\n",
    "            \n",
    "        url = 'https://www.amazon.in' + sub_url\n",
    "        \n",
    "        is_next = True\n",
    "    except Exception as e:\n",
    "        is_next = False\n",
    "        \n",
    "pd.DataFrame(final_product_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 8. Write a python program to extract information about the local weather from the National Weather Service website of USA, https://www.weather.gov/ for the city, San Francisco. You need to extract data about 7 day extended forecast display for the city. The data should include period, short description, temperature and description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://forecast.weather.gov/MapClick.php?lat=37.777120000000025&lon=-122.41963999999996#.YRzDFHUzZNg'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "forecast_boxs = get_body(url).find_all('div',{'class':'row-forecast'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "now = datetime.datetime.now() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_day_name = []\n",
    "for i in range(0,6):\n",
    "    all_day_name.append((now + datetime.timedelta(days=i)).strftime(\"%A\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>period</th>\n",
       "      <th>sort_desc</th>\n",
       "      <th>temprature</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Today</td>\n",
       "      <td>Widespread haze</td>\n",
       "      <td>70</td>\n",
       "      <td>Widespread haze. Areas of smoke between 4pm an...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Friday</td>\n",
       "      <td>Mostly cloudy through mid morning, then gradua...</td>\n",
       "      <td>69</td>\n",
       "      <td>Mostly cloudy through mid morning, then gradua...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Saturday</td>\n",
       "      <td>Mostly sunny, with a high near 65</td>\n",
       "      <td>65</td>\n",
       "      <td>Mostly sunny, with a high near 65. Breezy, wit...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>Mostly sunny, with a high near 65</td>\n",
       "      <td>65</td>\n",
       "      <td>Mostly sunny, with a high near 65.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Monday</td>\n",
       "      <td>Mostly sunny, with a high near 66</td>\n",
       "      <td>66</td>\n",
       "      <td>Mostly sunny, with a high near 66.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Mostly sunny, with a high near 67</td>\n",
       "      <td>67</td>\n",
       "      <td>Mostly sunny, with a high near 67.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Wednesday</td>\n",
       "      <td>Sunny, with a high near 69</td>\n",
       "      <td>69</td>\n",
       "      <td>Sunny, with a high near 69.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      period                                          sort_desc temprature  \\\n",
       "0      Today                                    Widespread haze         70   \n",
       "1     Friday  Mostly cloudy through mid morning, then gradua...         69   \n",
       "2   Saturday                  Mostly sunny, with a high near 65         65   \n",
       "3     Sunday                  Mostly sunny, with a high near 65         65   \n",
       "4     Monday                  Mostly sunny, with a high near 66         66   \n",
       "5    Tuesday                  Mostly sunny, with a high near 67         67   \n",
       "6  Wednesday                         Sunny, with a high near 69         69   \n",
       "\n",
       "                                         description  \n",
       "0  Widespread haze. Areas of smoke between 4pm an...  \n",
       "1  Mostly cloudy through mid morning, then gradua...  \n",
       "2  Mostly sunny, with a high near 65. Breezy, wit...  \n",
       "3                 Mostly sunny, with a high near 65.  \n",
       "4                 Mostly sunny, with a high near 66.  \n",
       "5                 Mostly sunny, with a high near 67.  \n",
       "6                        Sunny, with a high near 69.  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data = []\n",
    "for i, one_box in enumerate(forecast_boxs):\n",
    "    \n",
    "    forecast_label = one_box.find('div',{'class':'forecast-label'}).text \n",
    "    forecast_text = one_box.find('div',{'class':'forecast-text'}).text \n",
    "    \n",
    "    if i == 0:\n",
    "        period = 'Today'\n",
    "    elif forecast_label in all_day_name:\n",
    "        period = forecast_label\n",
    "    else:\n",
    "        continue\n",
    "        \n",
    "    sort_desc = forecast_text.split('.')[0]\n",
    "    temprature = forecast_text.split(', with a ')[1].split('.')[0][-2:]    \n",
    "    description = forecast_text\n",
    "    final_data.append({'period': period,'sort_desc': sort_desc,'temprature': temprature,'description': description})\n",
    "        \n",
    "df = pd.DataFrame(final_data) \n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9. Write a python program to scrape fresher job listings from ‘https://internshala.com/’. It should include job title, company name, CTC, and apply date."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://internshala.com/fresher-jobs'\n",
    "pagination_base_url = 'https://internshala.com/fresher-jobs/page-'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fetching: https://internshala.com/fresher-jobs/page-2\n",
      "fetching: https://internshala.com/fresher-jobs/page-3\n",
      "fetching: https://internshala.com/fresher-jobs/page-4\n",
      "fetching: https://internshala.com/fresher-jobs/page-5\n",
      "fetching: https://internshala.com/fresher-jobs/page-6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_title</th>\n",
       "      <th>copany_name</th>\n",
       "      <th>ctc</th>\n",
       "      <th>apply_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OMNI SPORT LEADER</td>\n",
       "      <td>Decathlon Sport India ...</td>\n",
       "      <td>3 - 4 LPA                                   ...</td>\n",
       "      <td>18 Sep' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Executive/Senior Executive - Partnerships</td>\n",
       "      <td>Freecharge Payments Te...</td>\n",
       "      <td>3 - 4.2 LPA                                 ...</td>\n",
       "      <td>11 Sep' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Executive - Sales</td>\n",
       "      <td>Freecharge Payments Te...</td>\n",
       "      <td>3 - 3.5 LPA                                 ...</td>\n",
       "      <td>11 Sep' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Junior Operations Executive</td>\n",
       "      <td>Freecharge Payments Te...</td>\n",
       "      <td>3 - 4 LPA                                   ...</td>\n",
       "      <td>4 Sep' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sales Manager/Omni Sport Leader - Retail</td>\n",
       "      <td>Decathlon Sport India ...</td>\n",
       "      <td>3.3 - 4.5 LPA                               ...</td>\n",
       "      <td>21 Aug' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>Data &amp; BI Consultant</td>\n",
       "      <td>CloudGarage           ...</td>\n",
       "      <td>3 LPA                                       ...</td>\n",
       "      <td>21 Aug' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>Full Stack Developer</td>\n",
       "      <td>PeakMind              ...</td>\n",
       "      <td>6 - 8 LPA                                   ...</td>\n",
       "      <td>21 Aug' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>Business Development Executive</td>\n",
       "      <td>Cafe Tatva Ventures LL...</td>\n",
       "      <td>3 - 5.5 LPA                                 ...</td>\n",
       "      <td>21 Aug' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Learning Counselor - Sales</td>\n",
       "      <td>Bambinos.Live         ...</td>\n",
       "      <td>3 - 3.1 LPA                                 ...</td>\n",
       "      <td>21 Aug' 21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Operations Manager</td>\n",
       "      <td>Touchstone Partners   ...</td>\n",
       "      <td>3 - 7 LPA                                   ...</td>\n",
       "      <td>3 Sep' 21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>217 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     job_title  \\\n",
       "0                            OMNI SPORT LEADER   \n",
       "1    Executive/Senior Executive - Partnerships   \n",
       "2                            Executive - Sales   \n",
       "3                  Junior Operations Executive   \n",
       "4     Sales Manager/Omni Sport Leader - Retail   \n",
       "..                                         ...   \n",
       "212                       Data & BI Consultant   \n",
       "213                       Full Stack Developer   \n",
       "214             Business Development Executive   \n",
       "215                 Learning Counselor - Sales   \n",
       "216                         Operations Manager   \n",
       "\n",
       "                                           copany_name  \\\n",
       "0                            Decathlon Sport India ...   \n",
       "1                            Freecharge Payments Te...   \n",
       "2                            Freecharge Payments Te...   \n",
       "3                            Freecharge Payments Te...   \n",
       "4                            Decathlon Sport India ...   \n",
       "..                                                 ...   \n",
       "212                          CloudGarage           ...   \n",
       "213                          PeakMind              ...   \n",
       "214                          Cafe Tatva Ventures LL...   \n",
       "215                          Bambinos.Live         ...   \n",
       "216                          Touchstone Partners   ...   \n",
       "\n",
       "                                                   ctc  apply_date  \n",
       "0      3 - 4 LPA                                   ...  18 Sep' 21  \n",
       "1      3 - 4.2 LPA                                 ...  11 Sep' 21  \n",
       "2      3 - 3.5 LPA                                 ...  11 Sep' 21  \n",
       "3      3 - 4 LPA                                   ...   4 Sep' 21  \n",
       "4      3.3 - 4.5 LPA                               ...  21 Aug' 21  \n",
       "..                                                 ...         ...  \n",
       "212    3 LPA                                       ...  21 Aug' 21  \n",
       "213    6 - 8 LPA                                   ...  21 Aug' 21  \n",
       "214    3 - 5.5 LPA                                 ...  21 Aug' 21  \n",
       "215    3 - 3.1 LPA                                 ...  21 Aug' 21  \n",
       "216    3 - 7 LPA                                   ...   3 Sep' 21  \n",
       "\n",
       "[217 rows x 4 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_next = True\n",
    "final_list = []\n",
    "i = 1\n",
    "\n",
    "while is_next:\n",
    "    \n",
    "\n",
    "    all_body_data = get_body(url)\n",
    "\n",
    "    all_boxs = all_body_data.find_all('div',{'class':['visibilityTrackerItem']})\n",
    "\n",
    "    \n",
    "    # Find all the data of the currecnt page\n",
    "    for one_box in all_boxs:\n",
    "        try:\n",
    "            inner_box = one_box.find('div',{'class':['internship_meta']})\n",
    "\n",
    "            \n",
    "            other_detail_item_row = inner_box.find('div',{'class':'internship_other_details_container'}) \\\n",
    "                .find_all('div',{'class','other_detail_item_row'})\n",
    "            \n",
    "            \n",
    "            job_title = inner_box.find('div',{'class':'profile'}).find('a').text\n",
    "            copany_name = inner_box.find('div',{'class':'company_name'}).find('a').text.replace('\\n','')\n",
    "            \n",
    "            ctc = other_detail_item_row[0].find_all('div',{'class':'item_body'})[1].text.replace('\\n','')\n",
    "            apply_date = other_detail_item_row[1].find('div',{'class':'item_body'}).text\n",
    "\n",
    "            final_list.append({\n",
    "                'job_title': job_title, \n",
    "                'copany_name': copany_name, \n",
    "                'ctc': ctc, \n",
    "                'apply_date': apply_date\n",
    "            })\n",
    "        except Exception as e:\n",
    "            continue\n",
    "            \n",
    "           \n",
    "    # move to the next page\n",
    "    \n",
    "    i += 1\n",
    "    try:\n",
    "        total_pages = all_body_data.find('span',{'id':'total_pages'}).text\n",
    "        if int(total_pages) != i-1:        \n",
    "            url = pagination_base_url + str(i)\n",
    "            print('fetching:',url)\n",
    "            is_next = True\n",
    "        else:\n",
    "            is_next = False\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        is_next = False\n",
    "        \n",
    "pd.DataFrame(final_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10. Write a python program to scrape house details from https://www.nobroker.in/ for any location. It should include house title, location, area, emi and price"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Beautifulsoup "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.nobroker.in/property/sale/bangalore/Creditguru?searchParam=W3sibGF0IjoxMi45ODAwNzU3LCJsb24iOjc3LjUxMTQ0OTM5OTk5OTk5LCJwbGFjZUlkIjoiQ2hJSksyNDFDRFE4cmpzUnFibWt5M2V4T0V3IiwicGxhY2VOYW1lIjoiQ3JlZGl0Z3VydSIsInNob3dNYXAiOmZhbHNlfV0=&radius=2.0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_boxes = get_body(url).find_all('div',{'class':'nb__2JHKO'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>house_title</th>\n",
       "      <th>location</th>\n",
       "      <th>area</th>\n",
       "      <th>emi</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4 BHK Flat  For Sale  In Naagarabhaavi</td>\n",
       "      <td>standalone building, 2nd Stage near BDA COMPLE...</td>\n",
       "      <td>3,998 sqft</td>\n",
       "      <td>?1.6 Lacs/Month</td>\n",
       "      <td>?2.8 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4+ BHK In Independent House  For Sale  In Naga...</td>\n",
       "      <td>Independent House, Kengeri Main Rd near BDA Co...</td>\n",
       "      <td>3,000 sqft</td>\n",
       "      <td>?3.01 Lacs/Month</td>\n",
       "      <td>?5.25 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2 BHK In Independent House  For Sale  In Bda L...</td>\n",
       "      <td>Independent House, 3rd Block Near  BDA COMPLEX...</td>\n",
       "      <td>1,800 sqft</td>\n",
       "      <td>?64,192/Month</td>\n",
       "      <td>?1.12 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2 BHK Flat  For Sale  In Vaibhava Apartment  I...</td>\n",
       "      <td>BDA Layout, 2nd Stage, near B.D.A. Complex</td>\n",
       "      <td>800 sqft</td>\n",
       "      <td>?30,949/Month</td>\n",
       "      <td>?54 Lacs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2 BHK Flat  For Sale  In Sree Sai Park View  I...</td>\n",
       "      <td>Nagarbhavi 2nd Stage , Near BDA complex next t...</td>\n",
       "      <td>745 sqft</td>\n",
       "      <td>?29,803/Month</td>\n",
       "      <td>?52 Lacs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4+ BHK Flat  For Sale  In Naagarabhaavi</td>\n",
       "      <td>standalone building, 2nd stage,Malagala Main R...</td>\n",
       "      <td>3,000 sqft</td>\n",
       "      <td>?63,045/Month</td>\n",
       "      <td>?1.1 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3 BHK Flat  For Sale  In Naagarabhaavi</td>\n",
       "      <td>Standalone building, Old Outer Ring Rd near KL...</td>\n",
       "      <td>1,800 sqft</td>\n",
       "      <td>?52,729/Month</td>\n",
       "      <td>?92 Lacs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4 BHK In Independent House  For Sale  In Nagar...</td>\n",
       "      <td>Independent House, 1st D Main 2nd stage, Near ...</td>\n",
       "      <td>1,800 sqft</td>\n",
       "      <td>?68,777/Month</td>\n",
       "      <td>?1.2 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2 BHK In Independent House  For Sale  In Nagar...</td>\n",
       "      <td>Independent House, 80 Feet Rd, Stage 2,  near ...</td>\n",
       "      <td>1,200 sqft</td>\n",
       "      <td>?65,338/Month</td>\n",
       "      <td>?1.14 Crores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4+ BHK Flat  For Sale  In Nagarbhavi</td>\n",
       "      <td>Standalone Building, Annapoorneshwari Nagar,ne...</td>\n",
       "      <td>4,300 sqft</td>\n",
       "      <td>?1.55 Lacs/Month</td>\n",
       "      <td>?2.7 Crores</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         house_title  \\\n",
       "0            4 BHK Flat  For Sale  In Naagarabhaavi    \n",
       "1  4+ BHK In Independent House  For Sale  In Naga...   \n",
       "2  2 BHK In Independent House  For Sale  In Bda L...   \n",
       "3  2 BHK Flat  For Sale  In Vaibhava Apartment  I...   \n",
       "4  2 BHK Flat  For Sale  In Sree Sai Park View  I...   \n",
       "5           4+ BHK Flat  For Sale  In Naagarabhaavi    \n",
       "6            3 BHK Flat  For Sale  In Naagarabhaavi    \n",
       "7  4 BHK In Independent House  For Sale  In Nagar...   \n",
       "8  2 BHK In Independent House  For Sale  In Nagar...   \n",
       "9              4+ BHK Flat  For Sale  In Nagarbhavi    \n",
       "\n",
       "                                            location        area  \\\n",
       "0  standalone building, 2nd Stage near BDA COMPLE...  3,998 sqft   \n",
       "1  Independent House, Kengeri Main Rd near BDA Co...  3,000 sqft   \n",
       "2  Independent House, 3rd Block Near  BDA COMPLEX...  1,800 sqft   \n",
       "3         BDA Layout, 2nd Stage, near B.D.A. Complex    800 sqft   \n",
       "4  Nagarbhavi 2nd Stage , Near BDA complex next t...    745 sqft   \n",
       "5  standalone building, 2nd stage,Malagala Main R...  3,000 sqft   \n",
       "6  Standalone building, Old Outer Ring Rd near KL...  1,800 sqft   \n",
       "7  Independent House, 1st D Main 2nd stage, Near ...  1,800 sqft   \n",
       "8  Independent House, 80 Feet Rd, Stage 2,  near ...  1,200 sqft   \n",
       "9  Standalone Building, Annapoorneshwari Nagar,ne...  4,300 sqft   \n",
       "\n",
       "                emi         price  \n",
       "0   ?1.6 Lacs/Month   ?2.8 Crores  \n",
       "1  ?3.01 Lacs/Month  ?5.25 Crores  \n",
       "2     ?64,192/Month  ?1.12 Crores  \n",
       "3     ?30,949/Month      ?54 Lacs  \n",
       "4     ?29,803/Month      ?52 Lacs  \n",
       "5     ?63,045/Month   ?1.1 Crores  \n",
       "6     ?52,729/Month      ?92 Lacs  \n",
       "7     ?68,777/Month   ?1.2 Crores  \n",
       "8     ?65,338/Month  ?1.14 Crores  \n",
       "9  ?1.55 Lacs/Month   ?2.7 Crores  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data = []\n",
    "for one_box in get_boxes:\n",
    "    \n",
    "    house_title = one_box.find('h2').text\n",
    "    location = one_box.find('div',{'class':'nb__2CMjv'}).text\n",
    "    \n",
    "    inner_box = one_box.find('div',{'class':'nb__17R6o'})\n",
    "    \n",
    "    area = inner_box.find('div',{'class':'nb__3oNyC'}).text\n",
    "    emi = inner_box.find('div',{'id':'roomType'}).text\n",
    "    price = inner_box.find('div',{'id':'minDeposit'}).find('span').text\n",
    "    \n",
    "    final_data.append({\n",
    "        'house_title': house_title,\n",
    "        'location': location,\n",
    "        'area': area, \n",
    "        'emi': emi, \n",
    "        'price': price\n",
    "    })\n",
    "\n",
    "df = pd.DataFrame(final_data)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## using api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_api_url = 'https://www.nobroker.in/api/v1/multi/property/sale/filter?pageNo={}&searchParam=W3sibGF0IjoxMi45ODAwNzU3LCJsb24iOjc3LjUxMTQ0OTM5OTk5OTk5LCJwbGFjZUlkIjoiQ2hJSksyNDFDRFE4cmpzUnFibWt5M2V4T0V3IiwicGxhY2VOYW1lIjoiQ3JlZGl0Z3VydSJ9XQ==&radius=2.0&city=bangalore'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>house_title</th>\n",
       "      <th>location</th>\n",
       "      <th>area</th>\n",
       "      <th>emi</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4 BHK Flat  For Sale  In Naagarabhaavi</td>\n",
       "      <td>2nd Stage near BDA COMPLEX NAGARBHAVINaagarabh...</td>\n",
       "      <td>3998</td>\n",
       "      <td>1.6 Lacs/Month</td>\n",
       "      <td>28000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4+ BHK In Independent House  For Sale  In Naga...</td>\n",
       "      <td>Kengeri Main Rd near BDA Complex NagarbhaviNag...</td>\n",
       "      <td>3000</td>\n",
       "      <td>3.01 Lacs/Month</td>\n",
       "      <td>52500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2 BHK In Independent House  For Sale  In Bda L...</td>\n",
       "      <td>3rd Block Near  BDA COMPLEX NAGARBHAVIBDA Layo...</td>\n",
       "      <td>1800</td>\n",
       "      <td>64,192/Month</td>\n",
       "      <td>11200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2 BHK Flat  For Sale  In Vaibhava Apartment  I...</td>\n",
       "      <td>BDA Layout, 2nd Stage, near B.D.A. ComplexNaga...</td>\n",
       "      <td>800</td>\n",
       "      <td>30,949/Month</td>\n",
       "      <td>5400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2 BHK Flat  For Sale  In Sree Sai Park View  I...</td>\n",
       "      <td>Nagarbhavi 2nd Stage , Near BDA complex next t...</td>\n",
       "      <td>745</td>\n",
       "      <td>29,803/Month</td>\n",
       "      <td>5200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>1 BHK Flat  For Sale  In Kamakshipalya</td>\n",
       "      <td>Vrushabhavathi Nagar Near Sapthagiri Bakery An...</td>\n",
       "      <td>600</td>\n",
       "      <td>37,254/Month</td>\n",
       "      <td>6500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>1 BHK Flat  For Sale  In Kamakshipalya</td>\n",
       "      <td>Vrushabhavathi Nagar Near Sapthagiri Bakery An...</td>\n",
       "      <td>600</td>\n",
       "      <td>37,254/Month</td>\n",
       "      <td>6500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>4+ BHK Flat  For Sale  In Kamakshipalya</td>\n",
       "      <td>Patalamma  St near to St.Lawrence English Scho...</td>\n",
       "      <td>600</td>\n",
       "      <td>55,021/Month</td>\n",
       "      <td>9600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>4 BHK In Independent House  For Sale  In Kamak...</td>\n",
       "      <td>Ranganathaoura, Near Ganesha TempleKamakshipal...</td>\n",
       "      <td>1650</td>\n",
       "      <td>71,643/Month</td>\n",
       "      <td>12500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>3 BHK Flat  For Sale  In  Naagarabhaavi,</td>\n",
       "      <td>Vinayaka Layout near Aryan Presidency School N...</td>\n",
       "      <td>1800</td>\n",
       "      <td>80,240/Month</td>\n",
       "      <td>14000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           house_title  \\\n",
       "0               4 BHK Flat  For Sale  In Naagarabhaavi   \n",
       "1    4+ BHK In Independent House  For Sale  In Naga...   \n",
       "2    2 BHK In Independent House  For Sale  In Bda L...   \n",
       "3    2 BHK Flat  For Sale  In Vaibhava Apartment  I...   \n",
       "4    2 BHK Flat  For Sale  In Sree Sai Park View  I...   \n",
       "..                                                 ...   \n",
       "296             1 BHK Flat  For Sale  In Kamakshipalya   \n",
       "297             1 BHK Flat  For Sale  In Kamakshipalya   \n",
       "298            4+ BHK Flat  For Sale  In Kamakshipalya   \n",
       "299  4 BHK In Independent House  For Sale  In Kamak...   \n",
       "300           3 BHK Flat  For Sale  In  Naagarabhaavi,   \n",
       "\n",
       "                                              location  area              emi  \\\n",
       "0    2nd Stage near BDA COMPLEX NAGARBHAVINaagarabh...  3998   1.6 Lacs/Month   \n",
       "1    Kengeri Main Rd near BDA Complex NagarbhaviNag...  3000  3.01 Lacs/Month   \n",
       "2    3rd Block Near  BDA COMPLEX NAGARBHAVIBDA Layo...  1800     64,192/Month   \n",
       "3    BDA Layout, 2nd Stage, near B.D.A. ComplexNaga...   800     30,949/Month   \n",
       "4    Nagarbhavi 2nd Stage , Near BDA complex next t...   745     29,803/Month   \n",
       "..                                                 ...   ...              ...   \n",
       "296  Vrushabhavathi Nagar Near Sapthagiri Bakery An...   600     37,254/Month   \n",
       "297  Vrushabhavathi Nagar Near Sapthagiri Bakery An...   600     37,254/Month   \n",
       "298  Patalamma  St near to St.Lawrence English Scho...   600     55,021/Month   \n",
       "299  Ranganathaoura, Near Ganesha TempleKamakshipal...  1650     71,643/Month   \n",
       "300  Vinayaka Layout near Aryan Presidency School N...  1800     80,240/Month   \n",
       "\n",
       "        price  \n",
       "0    28000000  \n",
       "1    52500000  \n",
       "2    11200000  \n",
       "3     5400000  \n",
       "4     5200000  \n",
       "..        ...  \n",
       "296   6500000  \n",
       "297   6500000  \n",
       "298   9600000  \n",
       "299  12500000  \n",
       "300  14000000  \n",
       "\n",
       "[301 rows x 5 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "next_page = True\n",
    "page_no = 1\n",
    "final_data = []\n",
    "while next_page:\n",
    "    one_page_contetn = requests.get(base_api_url.format(page_no)).content\n",
    "    one_page_json = json.loads(one_page_contetn)\n",
    "    \n",
    "    datas = one_page_json['data']\n",
    "    \n",
    "    if len(datas) == 0:\n",
    "        break\n",
    "    \n",
    "    for data in datas:\n",
    "\n",
    "        house_title = data['propertyTitle']\n",
    "        location = data['street'] + data['locality'] + data['city']\n",
    "        area = data['propertySize']\n",
    "        emi = data['defaultEmi']\n",
    "        price = data['price']\n",
    "    \n",
    "        final_data.append({\n",
    "            'house_title': house_title,\n",
    "            'location': location,\n",
    "            'area': area, \n",
    "            'emi': emi, \n",
    "            'price': price\n",
    "        })\n",
    "    page_no += 1\n",
    "df = pd.DataFrame(final_data)\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}